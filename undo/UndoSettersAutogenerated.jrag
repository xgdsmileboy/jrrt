aspect UndoSettersAutogenerated {
// AUTOGENERATED (script: UndoSettersAutogenerated.jrag.gen.sh)
	refine java public void VarAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "VarAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void BoundFieldAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "BoundFieldAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void MethodAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "MethodAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void BoundMethodAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "BoundMethodAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParMethodAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParMethodAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ConstructorAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ConstructorAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void SuperConstructorAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "SuperConstructorAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParSuperConstructorAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParSuperConstructorAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParConstructorAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParConstructorAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void TypeAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "TypeAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void BoundTypeAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "BoundTypeAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void BytecodeTypeAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "BytecodeTypeAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void PrimitiveTypeAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "PrimitiveTypeAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ArrayTypeAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ArrayTypeAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ArrayTypeWithSizeAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ArrayTypeWithSizeAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ThisAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ThisAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void SuperAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "SuperAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParseName.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParseName.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void PackageOrTypeAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "PackageOrTypeAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void AmbiguousAccess.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "AmbiguousAccess.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void TypeDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "TypeDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ReferenceType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ReferenceType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void NullType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "NullType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void VoidType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "VoidType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void AbstractWildcardType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "AbstractWildcardType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void WildcardExtendsType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "WildcardExtendsType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void WildcardSuperType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "WildcardSuperType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ClassDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ClassDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void UnknownType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "UnknownType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ArrayDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ArrayDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParClassDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParClassDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void RawClassDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "RawClassDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ClassDeclSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ClassDeclSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void InterfaceDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "InterfaceDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void AnnotationDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "AnnotationDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParInterfaceDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParInterfaceDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void RawInterfaceDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "RawInterfaceDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void InterfaceDeclSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "InterfaceDeclSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void AnonymousDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "AnonymousDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ConstructorDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ConstructorDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void GenericConstructorDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "GenericConstructorDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParConstructorDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParConstructorDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void RawConstructorDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "RawConstructorDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ConstructorDeclSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ConstructorDeclSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void FieldDeclaration.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "FieldDeclaration.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void FieldDeclarationSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "FieldDeclarationSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void FreshField.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "FreshField.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void VariableDeclaration.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "VariableDeclaration.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void FreshLocalVariable.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "FreshLocalVariable.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParameterDeclaration.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParameterDeclaration.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void VariableArityParameterDeclaration.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "VariableArityParameterDeclaration.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void VariableArityParameterDeclarationSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "VariableArityParameterDeclarationSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void FreshParameter.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "FreshParameter.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void MethodDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "MethodDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void GenericMethodDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "GenericMethodDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ParMethodDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ParMethodDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void RawMethodDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "RawMethodDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void AnnotationMethodDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "AnnotationMethodDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void MethodDeclSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "MethodDeclSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void BridgeMethodDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "BridgeMethodDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void IdUse.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "IdUse.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void Modifier.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "Modifier.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine StaticImports public void SingleStaticImportDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "SingleStaticImportDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Enums public void EnumDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "EnumDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Enums public void EnumConstant.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "EnumConstant.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Generics public void GenericClassDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "GenericClassDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Generics public void GenericClassDeclSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "GenericClassDeclSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Generics public void GenericInterfaceDecl.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "GenericInterfaceDecl.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Generics public void GenericInterfaceDeclSubstituted.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "GenericInterfaceDeclSubstituted.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Generics public void TypeVariable.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "TypeVariable.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Generics public void LUBType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "LUBType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Generics public void GLBType.setID(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, IDstart, IDend, tokenString_ID, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "GLBType.setID (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void PrimitiveTypeAccess.setName(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Namestart, Nameend, tokenString_Name, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "PrimitiveTypeAccess.setName (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine Annotations public void ElementValuePair.setName(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Namestart, Nameend, tokenString_Name, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ElementValuePair.setName (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine PackageDecl public void PackageDecl.setName(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Namestart, Nameend, tokenString_Name, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "PackageDecl.setName (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void TypeAccess.setPackage(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Packagestart, Packageend, tokenString_Package, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "TypeAccess.setPackage (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void BoundTypeAccess.setPackage(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Packagestart, Packageend, tokenString_Package, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "BoundTypeAccess.setPackage (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void BytecodeTypeAccess.setPackage(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Packagestart, Packageend, tokenString_Package, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "BytecodeTypeAccess.setPackage (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void PrimitiveTypeAccess.setPackage(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Packagestart, Packageend, tokenString_Package, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "PrimitiveTypeAccess.setPackage (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ArrayTypeAccess.setPackage(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Packagestart, Packageend, tokenString_Package, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ArrayTypeAccess.setPackage (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void ArrayTypeWithSizeAccess.setPackage(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Packagestart, Packageend, tokenString_Package, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "ArrayTypeWithSizeAccess.setPackage (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	

	refine java public void PackageAccess.setPackage(final String value) {
		if (Program.isRecordingASTChanges()) {
			Program.addUndoAction(new ASTModificationReplaceEdit(this.isInTree(), this, Packagestart, Packageend, tokenString_Package, value) {
				@Override
				public void undo() {
					refined(oldValue);
				}
				@Override
				public String toString() {
					return "PackageAccess.setPackage (ReplaceEdit)";
				}
				@Override
				public void redo() {
					if (Program.isRecordingASTChanges()) Program.addUndoAction(this);
					refined(value);
				}
			});
		}
		refined(value);
	}
	
}
