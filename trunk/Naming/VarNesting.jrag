/*
 * When we rename a local variable, it is important to check that the new name does
 * not clash with the name of an already existing local variable. The method
 * hasNestedLocal(name) checks whether a subtree contains a declaration of a local
 * variable or parameter of that name. 
 * 
 * The method canIntroduceLabel(id) does the same for labels.
 */

aspect VarNesting {
	
	inh boolean LocalDeclaration.canIntroduceLocal(String name);
	inh boolean Stmt.canIntroduceLocal(String name);
	eq Block.getStmt(int i).canIntroduceLocal(String name) {
		if(getStmt(i).hasNestingLocal(name))
			return false;
		while(i < getNumStmt())
			if(getStmt(i++).hasNestedLocal(name))
				return false;
		return true;
	}
	eq ForStmt.getInitStmt().canIntroduceLocal(String name) = !hasNestingLocal(name) && !hasNestedLocal(name);
	eq EnhancedForStmt.getVariableDeclaration().canIntroduceLocal(String name) = !hasNestingLocal(name) && !hasNestedLocal(name);
	eq MethodDecl.getParameter().canIntroduceLocal(String name) = !hasNestedLocal(name);
	eq ConstructorDecl.getParameter().canIntroduceLocal(String name) = !hasNestedLocal(name);
	eq BasicCatch.getParameter().canIntroduceLocal(String name) = !hasNestingLocal(name) && !hasNestedLocal(name);
	eq Program.getChild().canIntroduceLocal(String name) = true;

	inh BodyDecl CatchClause.enclosingBodyDecl();
	public boolean VariableScope.hasNestingLocal(String name) {
		for(Iterator<Variable> iter=lookupVariable(name).iterator(); iter.hasNext();) {
			Variable v = iter.next();
			if(v instanceof LocalDeclaration && ((LocalDeclaration)v).enclosingBodyDecl() == enclosingBodyDecl())
				return true;
		}
		return false;
	}

	public boolean Stmt.hasNestingLocal(String name) {
		for(Iterator<Variable> iter=lookupVariable(name).iterator(); iter.hasNext();) {
			Variable v = iter.next();
			if(v instanceof LocalDeclaration && ((LocalDeclaration)v).enclosingBodyDecl() == enclosingBodyDecl())
				return true;
		}
		return false;
	}
	
	// check whether this subtree contains a conflicting local declaration
	public boolean ASTNode.hasNestedLocal(String name) {
		for(int i=0;i<getNumChild();++i)
			if(getChild(i).hasNestedLocal(name))
				return true;
		return false;
	}
	
	public boolean LocalDeclaration.hasNestedLocal(String name) {
		if(name.equals(name()))
			return true;
		return super.hasNestedLocal(name);
	}
	
	// cut-off for local/anonymous classes
	public boolean TypeDecl.hasNestedLocal(String name) {
		return false;
	}
	
	// check whether this subtree contains no conflicting labels
	public boolean ASTNode.canIntroduceLabel(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null)
				if(!child.canIntroduceLabel(name))
					return false;
		}
		return true;
	}
	
	public boolean LabeledStmt.canIntroduceLabel(String name) {
		if(name.equals(getLabel()))
			return false;
		return super.canIntroduceLabel(name);
	}
}