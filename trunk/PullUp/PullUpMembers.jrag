aspect PullUpMembers {
	public void TypeDecl.pullUpMembers(MethodDecl[] meths, boolean[] makeAbstract, FieldDeclaration[] fields, MemberTypeDecl[] membertypes) {
		throw new RefactoringException("can only pull up from classes");
	}
	
	public void ClassDecl.pullUpMembers(MethodDecl[] meths, boolean[] makeAbstract, FieldDeclaration[] fields, MemberTypeDecl[] membertypes) {
		for(int i=0;i<membertypes.length;++i)
			membertypes[i].moveTo(superclass());
		for(int i=0;i<fields.length;++i)
			fields[i].moveTo(superclass());
		for(int i=0;i<meths.length;++i)
			meths[i].pullUp(makeAbstract[i]);
	}
	
	public void TypeDecl.doPullUpMembers(MethodDecl[] meths, boolean[] makeAbstract, FieldDeclaration[] fields, MemberTypeDecl[] membertypes) {
		pullUpMembers(meths, makeAbstract, fields, membertypes);
		programRoot().eliminate(LOCKED_DATAFLOW, LOCKED_NAMES, LOCKED_OVERRIDING);
	}
	
	public void MethodDecl.doPullUpWithRequired() {
		java.util.Set<MethodDecl> requiredMethods = new HashSet<MethodDecl>();
		java.util.Set<FieldDeclaration> requiredFields = new HashSet<FieldDeclaration>();
		java.util.Set<MemberTypeDecl> requiredTypes = new HashSet<MemberTypeDecl>();
		requiredMethods.add(this);
		TypeDecl host = hostType();
		host.addRequiredMembers(requiredMethods, requiredFields, requiredTypes);
		host.doPullUpMembers(requiredMethods.toArray(new MethodDecl[]{}),
							 new boolean[requiredMethods.size()],
							 requiredFields.toArray(new FieldDeclaration[]{}),
							 requiredTypes.toArray(new MemberTypeDecl[]{}));
	}
}