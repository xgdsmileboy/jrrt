//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.12.16 at 08:11:09 AM GMT 
//


package rtxf;

import javax.xml.bind.annotation.XmlRegistry;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the rtxf package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: rtxf
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Fieldref }
     * 
     */
    public Fieldref createFieldref() {
        return new Fieldref();
    }

    /**
     * Create an instance of {@link Bodydecl }
     * 
     */
    public Bodydecl createBodydecl() {
        return new Bodydecl();
    }

    /**
     * Create an instance of {@link Program }
     * 
     */
    public Program createProgram() {
        return new Program();
    }

    /**
     * Create an instance of {@link Rename }
     * 
     */
    public Rename createRename() {
        return new Rename();
    }

    /**
     * Create an instance of {@link Testcase }
     * 
     */
    public Testcase createTestcase() {
        return new Testcase();
    }

    /**
     * Create an instance of {@link Stmtref }
     * 
     */
    public Stmtref createStmtref() {
        return new Stmtref();
    }

    /**
     * Create an instance of {@link Refactoring }
     * 
     */
    public Refactoring createRefactoring() {
        return new Refactoring();
    }

    /**
     * Create an instance of {@link ExtractClass }
     * 
     */
    public ExtractClass createExtractClass() {
        return new ExtractClass();
    }

    /**
     * Create an instance of {@link Methodref }
     * 
     */
    public Methodref createMethodref() {
        return new Methodref();
    }

    /**
     * Create an instance of {@link Typedecl }
     * 
     */
    public Typedecl createTypedecl() {
        return new Typedecl();
    }

    /**
     * Create an instance of {@link Stmt }
     * 
     */
    public Stmt createStmt() {
        return new Stmt();
    }

    /**
     * Create an instance of {@link Expref }
     * 
     */
    public Expref createExpref() {
        return new Expref();
    }

    /**
     * Create an instance of {@link ExtractBlock }
     * 
     */
    public ExtractBlock createExtractBlock() {
        return new ExtractBlock();
    }

    /**
     * Create an instance of {@link Result }
     * 
     */
    public Result createResult() {
        return new Result();
    }

    /**
     * Create an instance of {@link Testsuite }
     * 
     */
    public Testsuite createTestsuite() {
        return new Testsuite();
    }

    /**
     * Create an instance of {@link ExtractConstant }
     * 
     */
    public ExtractConstant createExtractConstant() {
        return new ExtractConstant();
    }

    /**
     * Create an instance of {@link Tempref }
     * 
     */
    public Tempref createTempref() {
        return new Tempref();
    }

    /**
     * Create an instance of {@link Typeref }
     * 
     */
    public Typeref createTyperef() {
        return new Typeref();
    }

    /**
     * Create an instance of {@link Pkgref }
     * 
     */
    public Pkgref createPkgref() {
        return new Pkgref();
    }

    /**
     * Create an instance of {@link Cu }
     * 
     */
    public Cu createCu() {
        return new Cu();
    }

}
